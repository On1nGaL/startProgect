// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$chim-name: 'chim'
$chim-x: 147px
$chim-y: 0px
$chim-offset-x: -147px
$chim-offset-y: 0px
$chim-width: 63px
$chim-height: 69px
$chim-total-width: 210px
$chim-total-height: 137px
$chim-image: '../img/sprite.png'
$chim: (147px, 0px, -147px, 0px, 63px, 69px, 210px, 137px, '../img/sprite.png', 'chim', )
$m2c-name: 'm2c'
$m2c-x: 0px
$m2c-y: 82px
$m2c-offset-x: 0px
$m2c-offset-y: -82px
$m2c-width: 80px
$m2c-height: 55px
$m2c-total-width: 210px
$m2c-total-height: 137px
$m2c-image: '../img/sprite.png'
$m2c: (0px, 82px, 0px, -82px, 80px, 55px, 210px, 137px, '../img/sprite.png', 'm2c', )
$mast-name: 'mast'
$mast-x: 147px
$mast-y: 71px
$mast-offset-x: -147px
$mast-offset-y: -71px
$mast-width: 58px
$mast-height: 40px
$mast-total-width: 210px
$mast-total-height: 137px
$mast-image: '../img/sprite.png'
$mast: (147px, 71px, -147px, -71px, 58px, 40px, 210px, 137px, '../img/sprite.png', 'mast', )
$obez-name: 'obez'
$obez-x: 82px
$obez-y: 82px
$obez-offset-x: -82px
$obez-offset-y: -82px
$obez-width: 38px
$obez-height: 41px
$obez-total-width: 210px
$obez-total-height: 137px
$obez-image: '../img/sprite.png'
$obez: (82px, 82px, -82px, -82px, 38px, 41px, 210px, 137px, '../img/sprite.png', 'obez', )
$oct-name: 'oct'
$oct-x: 73px
$oct-y: 0px
$oct-offset-x: -73px
$oct-offset-y: 0px
$oct-width: 72px
$oct-height: 72px
$oct-total-width: 210px
$oct-total-height: 137px
$oct-image: '../img/sprite.png'
$oct: (73px, 0px, -73px, 0px, 72px, 72px, 210px, 137px, '../img/sprite.png', 'oct', )
$user-name: 'user'
$user-x: 0px
$user-y: 0px
$user-offset-x: 0px
$user-offset-y: 0px
$user-width: 71px
$user-height: 80px
$user-total-width: 210px
$user-total-height: 137px
$user-image: '../img/sprite.png'
$user: (0px, 0px, 0px, 0px, 71px, 80px, 210px, 137px, '../img/sprite.png', 'user', )
$spritesheet-width: 210px
$spritesheet-height: 137px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($chim, $m2c, $mast, $obez, $oct, $user, )
$spritesheet: (210px, 137px, '../img/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
